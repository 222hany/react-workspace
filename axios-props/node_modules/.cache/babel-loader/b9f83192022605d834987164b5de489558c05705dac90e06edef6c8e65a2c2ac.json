{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user1\\\\react-workspace\\\\axios-props\\\\src\\\\DataExam.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DataExam = () => {\n  _s();\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    //Axios 를 활용해서 API GET 요청\n    axios.get('https://jsonplaceholder.typicode.com/todos')\n\n    //만약 데이터를 가져오는데 성공한다면 데이터 처리\n    .then(response => {\n      setData(response.data);\n    })\n\n    //만약 데이터를 가져오는데 실패 할 경우 데이터 처리\n    .catch(error => {\n      console.log('일치하는 데이터가 없습니다.', error);\n    });\n  }, []); //useEffect 에서 함수가 한 번만 실행될 수 있도록 빈 배열을 생성.\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: data ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item.title\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(DataExam, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n_c = DataExam;\nexport default DataExam;\nvar _c;\n$RefreshReg$(_c, \"DataExam\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","DataExam","_s","data","setData","get","then","response","catch","error","console","log","children","map","item","title","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user1/react-workspace/axios-props/src/DataExam.js"],"sourcesContent":["import React, {useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst DataExam = () => {\r\n    const [data, setData] = useState(null);\r\n\r\n    useEffect(() => {\r\n        //Axios 를 활용해서 API GET 요청\r\n        axios.get('https://jsonplaceholder.typicode.com/todos')\r\n        \r\n        //만약 데이터를 가져오는데 성공한다면 데이터 처리\r\n        .then(response => {\r\n            setData(response.data);\r\n        })\r\n\r\n        //만약 데이터를 가져오는데 실패 할 경우 데이터 처리\r\n        .catch(error => {\r\n            console.log('일치하는 데이터가 없습니다.', error);\r\n        });\r\n    }, []); //useEffect 에서 함수가 한 번만 실행될 수 있도록 빈 배열을 생성.\r\n\r\n    return(\r\n        <>\r\n            {data ? (\r\n                <ul>\r\n                    {data.map(item => (\r\n                        <li key={item.id}>{item.title}</li>\r\n                        ))}\r\n                </ul>\r\n            ) : (\r\n            <p>데이터가 없습니다.</p>)}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DataExam;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACjD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACZ;IACAE,KAAK,CAACS,GAAG,CAAC,4CAA4C;;IAEtD;IAAA,CACCC,IAAI,CAACC,QAAQ,IAAI;MACdH,OAAO,CAACG,QAAQ,CAACJ,IAAI,CAAC;IAC1B,CAAC;;IAED;IAAA,CACCK,KAAK,CAACC,KAAK,IAAI;MACZC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,KAAK,CAAC;IACzC,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACIX,OAAA,CAAAE,SAAA;IAAAY,QAAA,EACKT,IAAI,gBACDL,OAAA;MAAAc,QAAA,EACKT,IAAI,CAACU,GAAG,CAACC,IAAI,iBACVhB,OAAA;QAAAc,QAAA,EAAmBE,IAAI,CAACC;MAAK,GAApBD,IAAI,CAACE,EAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAkB,CACjC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,gBAETtB,OAAA;MAAAc,QAAA,EAAG;IAAU;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAAE,gBACpB,CAAC;AAEX,CAAC;AAAAlB,EAAA,CA9BKD,QAAQ;AAAAoB,EAAA,GAARpB,QAAQ;AAgCd,eAAeA,QAAQ;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}