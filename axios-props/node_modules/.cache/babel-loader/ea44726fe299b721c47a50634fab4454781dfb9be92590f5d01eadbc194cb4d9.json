{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user1\\\\react-workspace\\\\axios-props\\\\src\\\\MovieListPaging.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios'; //부모\nimport MovieCard from './MovieCard';\nimport { Pagination } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieListPaging = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n\n  //현재 페이지\n  const [currentPage, setCurrentPage] = useState(1);\n\n  //한 페이지 당 보여줄 영화 수\n  const [moviesPerPage] = useState(5);\n\n  //현재 페이지에서 영화 목록 계산\n  const indexOfLastMovie = currentPage * moviesPerPage;\n  const indexOfFirstMovie = indexOfLastMovie - moviesPerPage;\n  const currentMovies = movies.slice(indexOfFirstMovie, indexOfLastMovie);\n\n  //외부에서 API를 통해 영화 데이터를 가져오고 내가 원하는 내용만 보여주고싶다 => then에 요청.\n  useEffect(() => {\n    axios.get('https://yts.mx/api/v2/list_movies.json').then(response => {\n      //가져온 데이터 중 필요한 정보만 가져와서 업데이트\n      const movieData = response.data.data.movies.map(movie => ({\n        id: movie.id,\n        title: movie.title,\n        rating: movie.rating,\n        poster: movie.medium_cover_image\n      }));\n      setMovies(movieData);\n    }).catch(error => {\n      console.log('데이터 없음', error);\n    });\n  }, []);\n\n  //페이지를 변경하기 위한 핸들러 추가\n  const handlePageChange = pageNumber => {\n    setCurrentPage(pageNumber);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [currentMovies.map(movie => /*#__PURE__*/_jsxDEV(MovieCard, {\n      movie: movie\n    }, movie.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(Pagination, {\n      children: [...Array(Math.ceil(movies.length / moviesPerPage)).keys()].map(number => /*#__PURE__*/_jsxDEV(Pagination.Item, {\n        active: number + 1 === currentPage,\n        onClick: () => handlePageChange(number + 1),\n        children: number + 1\n      }, number + 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieListPaging, \"E1D26AapAKocJ/PDjfKUflEptfU=\");\n_c = MovieListPaging;\nexport default MovieListPaging;\nvar _c;\n$RefreshReg$(_c, \"MovieListPaging\");","map":{"version":3,"names":["React","useState","useEffect","axios","MovieCard","Pagination","jsxDEV","_jsxDEV","MovieListPaging","_s","movies","setMovies","currentPage","setCurrentPage","moviesPerPage","indexOfLastMovie","indexOfFirstMovie","currentMovies","slice","get","then","response","movieData","data","map","movie","id","title","rating","poster","medium_cover_image","catch","error","console","log","handlePageChange","pageNumber","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","Math","ceil","length","keys","number","Item","active","onClick","_c","$RefreshReg$"],"sources":["C:/Users/user1/react-workspace/axios-props/src/MovieListPaging.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios'; //부모\r\nimport MovieCard from './MovieCard';\r\nimport { Pagination } from 'react-bootstrap';\r\n\r\nconst MovieListPaging = () => {\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  //현재 페이지\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  //한 페이지 당 보여줄 영화 수\r\n  const [moviesPerPage] = useState(5);\r\n\r\n  //현재 페이지에서 영화 목록 계산\r\n  const indexOfLastMovie = currentPage * moviesPerPage;\r\n  const indexOfFirstMovie = indexOfLastMovie - moviesPerPage;\r\n  const currentMovies = movies.slice(indexOfFirstMovie, indexOfLastMovie);\r\n\r\n  //외부에서 API를 통해 영화 데이터를 가져오고 내가 원하는 내용만 보여주고싶다 => then에 요청.\r\n  useEffect(() => {\r\n    axios\r\n      .get('https://yts.mx/api/v2/list_movies.json')\r\n      .then((response) => {\r\n        //가져온 데이터 중 필요한 정보만 가져와서 업데이트\r\n        const movieData = response.data.data.movies.map((movie) => ({\r\n          id: movie.id,\r\n          title: movie.title,\r\n          rating: movie.rating,\r\n          poster: movie.medium_cover_image,\r\n        }));\r\n        setMovies(movieData);\r\n      })\r\n      .catch((error) => {\r\n        console.log('데이터 없음', error);\r\n      });\r\n  }, []);\r\n\r\n  //페이지를 변경하기 위한 핸들러 추가\r\n  const handlePageChange = (pageNumber) => {\r\n    setCurrentPage(pageNumber);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {currentMovies.map((movie) => (\r\n        <MovieCard key={movie.id} movie={movie} />\r\n      ))}\r\n      <Pagination>\r\n        {[...Array(Math.ceil(movies.length / moviesPerPage)).keys()].map(\r\n          (number) => (\r\n            <Pagination.Item\r\n              key={number + 1}\r\n              active={number + 1 === currentPage}\r\n              onClick={() => handlePageChange(number + 1)}\r\n            >\r\n              {number + 1}\r\n            </Pagination.Item>\r\n          )\r\n        )}\r\n      </Pagination>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieListPaging;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAC;AAC3B,OAAOC,SAAS,MAAM,aAAa;AACnC,SAASC,UAAU,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAExC;EACA,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;;EAEjD;EACA,MAAM,CAACa,aAAa,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;;EAEnC;EACA,MAAMc,gBAAgB,GAAGH,WAAW,GAAGE,aAAa;EACpD,MAAME,iBAAiB,GAAGD,gBAAgB,GAAGD,aAAa;EAC1D,MAAMG,aAAa,GAAGP,MAAM,CAACQ,KAAK,CAACF,iBAAiB,EAAED,gBAAgB,CAAC;;EAEvE;EACAb,SAAS,CAAC,MAAM;IACdC,KAAK,CACFgB,GAAG,CAAC,wCAAwC,CAAC,CAC7CC,IAAI,CAAEC,QAAQ,IAAK;MAClB;MACA,MAAMC,SAAS,GAAGD,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACb,MAAM,CAACc,GAAG,CAAEC,KAAK,KAAM;QAC1DC,EAAE,EAAED,KAAK,CAACC,EAAE;QACZC,KAAK,EAAEF,KAAK,CAACE,KAAK;QAClBC,MAAM,EAAEH,KAAK,CAACG,MAAM;QACpBC,MAAM,EAAEJ,KAAK,CAACK;MAChB,CAAC,CAAC,CAAC;MACHnB,SAAS,CAACW,SAAS,CAAC;IACtB,CAAC,CAAC,CACDS,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,KAAK,CAAC;IAC9B,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMG,gBAAgB,GAAIC,UAAU,IAAK;IACvCvB,cAAc,CAACuB,UAAU,CAAC;EAC5B,CAAC;EAED,oBACE7B,OAAA;IAAA8B,QAAA,GACGpB,aAAa,CAACO,GAAG,CAAEC,KAAK,iBACvBlB,OAAA,CAACH,SAAS;MAAgBqB,KAAK,EAAEA;IAAM,GAAvBA,KAAK,CAACC,EAAE;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAiB,CAC1C,CAAC,eACFlC,OAAA,CAACF,UAAU;MAAAgC,QAAA,EACR,CAAC,GAAGK,KAAK,CAACC,IAAI,CAACC,IAAI,CAAClC,MAAM,CAACmC,MAAM,GAAG/B,aAAa,CAAC,CAAC,CAACgC,IAAI,CAAC,CAAC,CAAC,CAACtB,GAAG,CAC7DuB,MAAM,iBACLxC,OAAA,CAACF,UAAU,CAAC2C,IAAI;QAEdC,MAAM,EAAEF,MAAM,GAAG,CAAC,KAAKnC,WAAY;QACnCsC,OAAO,EAAEA,CAAA,KAAMf,gBAAgB,CAACY,MAAM,GAAG,CAAC,CAAE;QAAAV,QAAA,EAE3CU,MAAM,GAAG;MAAC,GAJNA,MAAM,GAAG,CAAC;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKA,CAErB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEV,CAAC;AAAChC,EAAA,CA1DID,eAAe;AAAA2C,EAAA,GAAf3C,eAAe;AA4DrB,eAAeA,eAAe;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}